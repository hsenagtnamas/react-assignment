{"version":3,"sources":["serviceWorker.js","examples/3-assignment-redux/App.js","examples/3-assignment-redux/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Element","props","element","backgroundColor","heighlight","TableCell","style","number","RowElements","listItems","elements","map","e","i","TableRow","TableElements","maxElementsInRow","rows","row","j","length","push","Table","TableBody","App","defaultElements","useState","RootApp","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCfN,SAASC,EAAQC,GAAO,IAEZC,EAAYD,EAAZC,QAEFC,EAAkBD,EAAQE,WAAa,OAAS,QAEtD,OAEI,cAACC,EAAA,EAAD,CAAWC,MAAO,CAACH,mBAAnB,SACKD,EAAQK,SAOrB,SAASC,EAAcP,GAAQ,IAIrBQ,EAFaR,EAAbS,SAEqBC,KAAK,SAACC,EAAEC,GAAH,OAAS,cAACb,EAAD,CAASE,QAASU,OAE3D,OAAS,eAACE,EAAA,EAAD,WAAWL,EAAU,0BAMlC,SAASM,EAAgBd,GAMrB,IAN6B,IAAD,EAEcA,EAApCe,wBAFsB,MAEH,GAFG,EAECN,EAAaT,EAAbS,SAEzBO,EAAO,GAEDJ,EAAI,EAAGA,EAAIG,EAAkBH,GAAK,EAAG,CAE3C,IADA,IAAIK,EAAM,GACAC,EAAIN,EAAGM,EAAIT,EAASU,OAAQD,GAAKH,EACvCE,EAAIG,KAAOX,EAASS,IAExBF,EAAKI,KAAKH,GAGd,IAAMT,EAAYQ,EAAKN,KAAK,SAACO,EAAIL,GAAL,OAAW,6BAAI,cAACL,EAAD,CAA+BE,SAAWQ,GAAxB,OAASL,QAEtE,OAAS,cAACS,EAAA,EAAD,UAAO,cAACC,EAAA,EAAD,UAAYd,MAuBjBe,MApBf,WAGI,IADA,IAAIC,EAAkB,GACZZ,EAAI,EAAGA,GAAK,IAAKA,IACvBY,EAAgBJ,KAAO,CACnBd,OAASM,EACTT,WAAaS,EAAE,GAAK,IANjB,MAUqBa,mBAASD,GAV9B,mBAUJf,EAVI,KAaX,OAbW,KAeH,cAACK,EAAD,CAAeL,SAAWA,KCtDvBiB,MARf,WACE,OACE,8BACI,cAAC,EAAD,OCERC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27c2c48e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,  {useState, useEffect} from 'react';\r\nimport { Table, TableBody, TableRow, TableCell } from '@material-ui/core';\r\n\r\nfunction Element(props){\r\n\r\n    const { element } = props;\r\n\r\n    const backgroundColor = element.heighlight ? 'blue' : 'white'\r\n\r\n    return (\r\n\r\n        <TableCell style={{backgroundColor}} >\r\n            {element.number}\r\n        </TableCell>\r\n\r\n    )\r\n}\r\n\r\n\r\nfunction RowElements ( props ){\r\n\r\n    let { elements } = props\r\n\r\n    const listItems = elements.map( (e,i) => <Element element={e} /> )\r\n    \r\n    return ( <TableRow>{listItems}<br/></TableRow>);\r\n\r\n\r\n}\r\n\r\n\r\nfunction TableElements ( props ){\r\n\r\n    let { maxElementsInRow = 10, elements } = props\r\n    \r\n    let rows = []\r\n\r\n    for ( var i = 0; i < maxElementsInRow; i += 1 ){\r\n        let row = []\r\n        for ( var j = i; j < elements.length; j += maxElementsInRow ){\r\n            row.push ( elements[j] )\r\n        }\r\n        rows.push(row)\r\n    }\r\n\r\n    const listItems = rows.map( (row,i) => <tr><RowElements key={'row-' + i}  elements={ row}   /></tr> )\r\n\r\n    return ( <Table><TableBody>{listItems}</TableBody></Table>);\r\n}\r\n\r\nfunction App() {\r\n\r\n    let defaultElements = []\r\n    for ( var i = 1; i <= 100; i++ ){\r\n        defaultElements.push ( {\r\n            number : i,\r\n            heighlight : i%3 == 0\r\n        })\r\n    }\r\n\r\n    const [elements, setElements] = useState(defaultElements);\r\n\r\n\r\n    return (\r\n        \r\n            <TableElements elements ={elements} />\r\n            \r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport App from './App';\n\nfunction RootApp() {\n  return (\n    <div>\n        <App />\n    </div>\n  );\n}\n\nexport default RootApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\n//Change the example number to try different apps in the example folder\nimport App from './examples/3-assignment-redux/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}